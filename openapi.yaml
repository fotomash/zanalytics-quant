openapi: 3.1.0
info:
  title: Zanalytics Pulse – Whisperer API
  version: 0.1.0
  description: |
    Minimal endpoints used by the dashboard, bot and GPT Actions.
    Authentication is not required; an optional `X-Pulse-Key` header may be
    enabled later without breaking this contract.
servers:
  - url: https://django2.zanalytics.app
paths:
  /api/v1/market/mini:
    get:
      summary: Market header mini payload
      operationId: getMarketMini
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  vix:
                    type: object
                    properties:
                      series:
                        type: array
                        items: { type: number }
                      value:
                        type: number
                  dxy:
                    type: object
                    properties:
                      series:
                        type: array
                        items: { type: number }
                      value:
                        type: number
                  news:
                    type: object
                    properties:
                      label: { type: string }
                      countdown: { type: string, nullable: true }
                  regime:
                    type: string
  /api/v1/market/fetch:
    get:
      summary: Fetch VIX/DXY from public source and cache to Redis
      operationId: fetchMarketData
      responses: { '200': { description: OK } }
  /api/v1/market/news/next:
    post:
      summary: Publish next high‑impact news item to Redis
      operationId: publishNextNews
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                label: { type: string }
                ts: { type: string, nullable: true, description: ISO8601 timestamp }
      responses: { '200': { description: OK } }
  /api/v1/mirror/state:
    get:
      summary: Behavioral mirror state
      operationId: getMirrorState
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  patience_ratio: { type: number, nullable: true }
                  discipline: { type: number, nullable: true }
                  efficiency: { type: number, nullable: true }
                  conviction_hi_win: { type: number, nullable: true }
                  conviction_lo_loss: { type: number, nullable: true }
                  pnl_norm: { type: number, nullable: true }
                  pnl_today: { type: number, nullable: true }
  /api/v1/discipline/summary:
    get:
      summary: Discipline daily/7‑day summary with events
      operationId: getDisciplineSummary
      responses: { '200': { description: OK } }
  /api/v1/profit-horizon:
    get:
      summary: Profit Horizon data (last N closed trades)
      operationId: getProfitHorizon
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 20, minimum: 1, maximum: 100 }
      responses: { '200': { description: OK } }
  /api/v1/feed/balance:
    get:
      summary: Balance feed (awaiting-friendly)
      operationId: getFeedBalance
      responses: { '200': { description: OK } }
  /api/v1/feed/equity:
    get:
      summary: Equity feed (awaiting-friendly)
      operationId: getFeedEquity
      responses: { '200': { description: OK } }
  /api/v1/feed/trade:
    get:
      summary: Trade feed (awaiting-friendly)
      operationId: getFeedTrade
      responses: { '200': { description: OK } }
  /api/v1/feed/behavior:
    get:
      summary: Behavior feed (awaiting-friendly)
      operationId: getFeedBehavior
      responses: { '200': { description: OK } }
  /api/v1/account/positions:
    get:
      summary: Normalized open positions proxy
      operationId: getAccountPositions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /api/v1/positions/open:
    get:
      summary: Normalized open positions (alias)
      operationId: getPositionsOpen
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /api/v1/account/info:
    get:
      summary: Normalized MT5 account info
      operationId: getAccountInfo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  equity: { type: number, nullable: true }
                  balance: { type: number, nullable: true }
                  margin: { type: number, nullable: true }
                  free_margin: { type: number, nullable: true }
                  margin_level: { type: number, nullable: true }
                  profit: { type: number, nullable: true }
                  login: { type: string, nullable: true }
                  server: { type: string, nullable: true }
                  currency: { type: string, nullable: true }
  /api/v1/journal/append:
    post:
      summary: Append a structured journal entry (linked to trade)
      operationId: postJournalAppend
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                trade_id: { type: integer }
                kind: { type: string }
                text: { type: string }
                tags: { type: array, items: { type: string } }
                meta: { type: object }
      responses: { '200': { description: OK } }
  /api/v1/journal/recent:
    get:
      summary: Recent journal entries
      operationId: getJournalRecent
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 50, minimum: 1, maximum: 200 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id: { type: integer }
                    ts: { type: string }
                    trade_id: { type: integer, nullable: true }
                    text: { type: string }
  /api/pulse/whispers:
    get:
      summary: Latest whispers stream
      operationId: getWhispers
      responses: { '200': { description: OK } }
  /api/pulse/whisper/ack:
    post:
      summary: Acknowledge a whisper
      operationId: postWhisperAck
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id: { type: string }
                reason: { type: string, nullable: true }
      responses: { '200': { description: OK } }
  /api/pulse/whisper/act:
    post:
      summary: Act on a whisper (journal intent)
      operationId: postWhisperAct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id: { type: string }
                action: { type: string }
      responses: { '200': { description: OK } }
  /api/pulse/whispers/log:
    get:
      summary: Human‑readable whisper timeline
      operationId: getWhispersLog
      responses: { '200': { description: OK } }
components:
  schemas: {}
  securitySchemes:
    pulseKey:
      type: apiKey
      name: X-Pulse-Key
      in: header
security: []
