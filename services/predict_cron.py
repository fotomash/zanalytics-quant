import os
import time
from typing import Any

from services.mcp2 import call_local_echo

ALERT_CHANNEL = os.getenv("PREDICT_ALERT_CHANNEL", "discord-alerts")
LAST_EVENT_KEY = os.getenv("PREDICT_LAST_EVENT_KEY", "predict:last_event")
SILENCE_THRESHOLD = float(os.getenv("PREDICT_SILENCE_THRESHOLD", "60"))

def check_silence(redis_client: Any, *, threshold: float = SILENCE_THRESHOLD) -> None:
    """Publish alert if ``redis_client`` reports silence beyond ``threshold``.

    ``redis_client`` must provide ``get`` and ``publish`` methods. The last
    event timestamp is fetched from ``LAST_EVENT_KEY``. If the difference
    between the current time and that timestamp exceeds ``threshold``, an alert
    message generated by :func:`call_local_echo` is published to
    ``ALERT_CHANNEL``.
    """
    try:
        last_raw = redis_client.get(LAST_EVENT_KEY)
        last = float(last_raw) if last_raw else 0.0
    except Exception:
        last = 0.0

    now = time.time()
    if now - last > threshold:
        msg = call_local_echo(f"No predictions for {int(now - last)}s")
        redis_client.publish(ALERT_CHANNEL, msg)

