openapi: 3.1.0
info:
  title: Zanalytics Pulse – Actions Bus (Slim)
  version: 0.1.1
  description: |
    Slim spec for agent-facing Actions routed via a single endpoint.
    Keeps the main API under the 30‑operation cap while exposing core verbs.
servers:
  - url: https://mcp1.zanalytics.app
x-openai:
  trusted: true
  permissions:
    - domain: mcp1.zanalytics.app
      always_allow: true
  scopes:
    - read
    - write
    - execute
paths:
  /api/v1/actions/read:
    get:
      summary: Query a read-only action (alias; avoids consent prompts in most runtimes)
      operationId: getActionsRead
      parameters:
        - in: query
          name: type
          required: true
          schema:
            type: string
            enum: [
              session_boot,
              trades_recent,
              trades_history_mt5,
              account_info,
              account_positions,
              account_risk,
              equity_today,
              market_mini,
              market_symbols,
              market_calendar_next,
              market_regime,
              liquidity_map,
              state_snapshot,
              journal_recent,
              whisper_suggest
            ]
        - in: query
          name: limit
          required: false
          schema: { type: integer }
        - in: query
          name: symbol
          required: false
          schema: { type: string }
        - in: query
          name: timeframe
          required: false
          schema: { type: string }
        - in: query
          name: date_from
          required: false
          schema: { type: string }
        - in: query
          name: date_to
          required: false
          schema: { type: string }
        - in: query
          name: pnl_min
          required: false
          schema: { type: number }
        - in: query
          name: pnl_max
          required: false
          schema: { type: number }
        - in: query
          name: user_id
          required: false
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/WhisperSuggestResponse'
                  - type: array
                    description: trades_recent result
                    items:
                      $ref: '#/components/schemas/TradeItem'
                  - $ref: '#/components/schemas/SessionBootResponse'
                  - type: array
                    description: trades_history_mt5 result
                    items:
                      $ref: '#/components/schemas/TradeHistoryItem'
        '400': { description: Bad Request }
        '500': { description: Server Error }
  /api/v1/actions/query:
    get:
      summary: Query a read-only action (no consent prompts in most runtimes)
      operationId: getActionsQuery
      parameters:
        - in: query
          name: type
          required: true
          schema:
            type: string
            enum: [
              session_boot,
              trades_recent,
              trades_history_mt5,
              account_info,
              account_positions,
              account_risk,
              equity_today,
              market_mini,
              market_symbols,
              market_calendar_next,
              market_regime,
              liquidity_map,
              state_snapshot,
              journal_recent,
              whisper_suggest
            ]
        - in: query
          name: limit
          required: false
          schema: { type: integer }
        - in: query
          name: symbol
          required: false
          schema: { type: string }
        - in: query
          name: timeframe
          required: false
          schema: { type: string }
        - in: query
          name: date_from
          required: false
          schema: { type: string }
        - in: query
          name: date_to
          required: false
          schema: { type: string }
        - in: query
          name: pnl_min
          required: false
          schema: { type: number }
        - in: query
          name: pnl_max
          required: false
          schema: { type: number }
        - in: query
          name: user_id
          required: false
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/WhisperSuggestResponse'
                  - type: array
                    description: trades_recent result
                    items:
                      $ref: '#/components/schemas/TradeItem'
                  - $ref: '#/components/schemas/SessionBootResponse'
                  - type: array
                    description: trades_history_mt5 result
                    items:
                      $ref: '#/components/schemas/TradeHistoryItem'
        '400': { description: Bad Request }
        '500': { description: Server Error }
    post:
      summary: Execute an action (query verbs)
      operationId: postActionsQuery
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionQueryRequest'
            examples:
              position_close_half:
                summary: Close 50% of a position
                value:
                  type: position_close
                  payload:
                    ticket: 302402468
                    fraction: 0.5
              position_modify_sl:
                summary: Set/modify stop loss
                value:
                  type: position_modify
                  payload:
                    ticket: 302402468
                    sl: 3625
              position_open_buy:
                summary: Open a small BUY
                value:
                  type: position_open
                  payload:
                    symbol: XAUUSD
                    volume: 0.1
                    side: buy
                    sl: 0
                    tp: 0
              position_hedge_full:
                summary: Hedge a position with full size
                value:
                  type: position_hedge
                  payload:
                    ticket: 302402468
              session_boot_default:
                summary: Boot snapshot
                value:
                  type: session_boot
                  payload:
                    limit_trades: 10
                    include_positions: true
                    include_equity: true
                    include_risk: true
              market_symbols_simple:
                summary: Fetch symbols list
                value:
                  type: market_symbols
                  payload: {}
              journal_append_partial:
                summary: Journal a partial close
                value:
                  type: journal_append
                  payload:
                    trade_id: 302402468
                    kind: PARTIAL_CLOSE
                    text: Closed 50% of XAUUSD short
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/WhisperSuggestResponse'
                  - type: array
                    description: trades_recent result
                    items:
                      $ref: '#/components/schemas/TradeItem'
                  - $ref: '#/components/schemas/SessionBootResponse'
                  - type: array
                    description: trades_history_mt5 result
                    items:
                      $ref: '#/components/schemas/TradeHistoryItem'
                  - $ref: '#/components/schemas/PositionActionResponse'
        '400': { description: Bad Request }
        '500': { description: Server Error }

  /api/v1/positions/close:
    post:
      summary: Close an existing open position (full or partial)
      operationId: postPositionClose
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PositionClosePayload'
            examples:
              close_half:
                summary: Close half of a position
                value:
                  ticket: 302402468
                  fraction: 0.5
              close_full:
                summary: Close a position entirely
                value:
                  ticket: 302402468
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PositionActionResponse'
        '400': { description: Bad Request }
        '404': { description: Not Found }
        '500': { description: Server Error }

  /api/v1/positions/hedge:
    post:
      summary: Open an opposite hedge for an existing position
      operationId: postPositionHedge
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PositionHedgePayload'
            examples:
              hedge_full:
                summary: Hedge a position with full size
                value:
                  ticket: 302402468
              hedge_partial:
                summary: Hedge a position with specified volume
                value:
                  ticket: 302402468
                  volume: 0.1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PositionActionResponse'
        '400': { description: Bad Request }
        '404': { description: Not Found }
        '500': { description: Server Error }

  /api/v1/positions/modify:
    post:
      summary: Modify an existing open position (SL/TP)
      operationId: postPositionModify
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PositionModifyPayload'
            examples:
              modify_sl_only:
                summary: Set/modify stop loss only
                value:
                  ticket: 302402468
                  sl: 147.445
              modify_sl_tp:
                summary: Set/modify stop loss and take profit
                value:
                  ticket: 302402468
                  sl: 147.445
                  tp: 148.250
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PositionActionResponse'
        '400': { description: Bad Request }
        '404': { description: Not Found }
        '500': { description: Server Error }

  /api/v1/positions/{ticket}/modify:
    post:
      summary: Modify an existing open position by ticket (SL/TP)
      operationId: postPositionModifyByTicket
      parameters:
        - in: path
          name: ticket
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sl: { type: number, nullable: true }
                tp: { type: number, nullable: true }
              anyOf:
                - required: [sl]
                - required: [tp]
            examples:
              modify_sl_only:
                summary: Set/modify stop loss only
                value:
                  sl: 147.445
              modify_sl_tp:
                summary: Set/modify stop loss and take profit
                value:
                  sl: 147.445
                  tp: 148.250
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PositionActionResponse'
        '400': { description: Bad Request }
        '404': { description: Not Found }
        '500': { description: Server Error }

  /trade/open:
    post:
      summary: Open a new trading position
      operationId: postTradeOpen
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PositionOpenPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PositionActionResponse'
        '400': { description: Bad Request }
        '500': { description: Server Error }

  /trade/close:
    post:
      summary: Close an existing trading position
      operationId: postTradeClose
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PositionClosePayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PositionActionResponse'
        '400': { description: Bad Request }
        '404': { description: Not Found }
        '500': { description: Server Error }

  /trade/modify:
    post:
      summary: Modify stop-loss or take-profit for a position
      operationId: postTradeModify
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PositionModifyPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PositionActionResponse'
        '400': { description: Bad Request }
        '404': { description: Not Found }
        '500': { description: Server Error }

  /api/v1/mcp1/authenticate:
    post:
      summary: Authenticate session via MCP1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Session valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: authenticated

components:
  schemas:
    ActionQuery:
      description: Polymorphic action request selected by the 'type' discriminator.
      oneOf:
        - $ref: '#/components/schemas/PositionOpenRequest'
        - $ref: '#/components/schemas/PositionCloseRequest'
        - $ref: '#/components/schemas/PositionModifyRequest'
        - $ref: '#/components/schemas/PositionHedgeRequest'
        - $ref: '#/components/schemas/SessionBootRequest'
        - $ref: '#/components/schemas/StateSnapshotRequest'
        - $ref: '#/components/schemas/TradesRecentRequest'
        - $ref: '#/components/schemas/TradesHistoryMt5Request'
        - $ref: '#/components/schemas/AccountInfoRequest'
        - $ref: '#/components/schemas/AccountPositionsRequest'
        - $ref: '#/components/schemas/AccountRiskRequest'
        - $ref: '#/components/schemas/EquityTodayRequest'
        - $ref: '#/components/schemas/PulseStatusRequest'
        - $ref: '#/components/schemas/MarketMiniRequest'
        - $ref: '#/components/schemas/MarketSymbolsRequest'
        - $ref: '#/components/schemas/MarketCalendarNextRequest'
        - $ref: '#/components/schemas/MarketRegimeRequest'
        - $ref: '#/components/schemas/LiquidityMapRequest'
        - $ref: '#/components/schemas/OpportunityPriorityItemsRequest'
        - $ref: '#/components/schemas/JournalRecentRequest'
        - $ref: '#/components/schemas/JournalAppendRequest'
        - $ref: '#/components/schemas/BehaviorEventsRequest'
        - $ref: '#/components/schemas/WhisperSuggestRequest'
      discriminator:
        propertyName: type
        mapping:
          position_open: '#/components/schemas/PositionOpenRequest'
          position_close: '#/components/schemas/PositionCloseRequest'
          position_modify: '#/components/schemas/PositionModifyRequest'
          position_hedge: '#/components/schemas/PositionHedgeRequest'
          session_boot: '#/components/schemas/SessionBootRequest'
          state_snapshot: '#/components/schemas/StateSnapshotRequest'
          trades_recent: '#/components/schemas/TradesRecentRequest'
          trades_history_mt5: '#/components/schemas/TradesHistoryMt5Request'
          account_info: '#/components/schemas/AccountInfoRequest'
          account_positions: '#/components/schemas/AccountPositionsRequest'
          account_risk: '#/components/schemas/AccountRiskRequest'
          equity_today: '#/components/schemas/EquityTodayRequest'
          pulse_status: '#/components/schemas/PulseStatusRequest'
          market_mini: '#/components/schemas/MarketMiniRequest'
          market_snapshot: '#/components/schemas/MarketMiniRequest'
          market_symbols: '#/components/schemas/MarketSymbolsRequest'
          market_calendar_next: '#/components/schemas/MarketCalendarNextRequest'
          market_regime: '#/components/schemas/MarketRegimeRequest'
          liquidity_map: '#/components/schemas/LiquidityMapRequest'
          opportunity_priority_items: '#/components/schemas/OpportunityPriorityItemsRequest'
          journal_recent: '#/components/schemas/JournalRecentRequest'
          journal_append: '#/components/schemas/JournalAppendRequest'
          behavior_events: '#/components/schemas/BehaviorEventsRequest'
          whisper_suggest: '#/components/schemas/WhisperSuggestRequest'

      ActionQueryRequest:
        type: object
        required: [type]
        properties:
          type:
            type: string
            description: Action verb
            enum: [
              whisper_suggest,
              session_boot,
              state_snapshot,
              trades_recent,
              trades_history_mt5,
              account_info,
              account_positions,
              account_risk,
              equity_today,
              pulse_status,
              market_mini,
              market_snapshot,
              market_symbols,
              market_calendar_next,
              market_regime,
              liquidity_map,
              opportunity_priority_items,
              journal_recent,
              journal_append,
              behavior_events,
              position_open,
              position_close,
              position_modify,
              position_hedge
            ]
          payload:
            description: Action-specific parameters (varies by verb)
            oneOf:
              - $ref: '#/components/schemas/PositionClosePayload'
              - $ref: '#/components/schemas/PositionOpenPayload'
              - $ref: '#/components/schemas/PositionModifyPayload'
              - $ref: '#/components/schemas/PositionHedgePayload'
              - $ref: '#/components/schemas/SessionBootPayload'
              - $ref: '#/components/schemas/TradesRecentPayload'
              - $ref: '#/components/schemas/TradesHistoryMt5Payload'
              - $ref: '#/components/schemas/MarketCalendarNextPayload'
              - $ref: '#/components/schemas/LiquidityMapPayload'
              - $ref: '#/components/schemas/OpportunityPriorityItemsPayload'
              - $ref: '#/components/schemas/PulseStatusPayload'
              - $ref: '#/components/schemas/JournalRecentPayload'
              - $ref: '#/components/schemas/JournalAppendPayload'
              - $ref: '#/components/schemas/WhisperSuggestPayload'
              - type: object
                additionalProperties: true
                description: Generic object for verbs that take no parameters

    # ----- Request variants (typed by 'type') -----
    PositionOpenRequest:
      type: object
      required: [type, payload]
      properties:
        type: { type: string, const: position_open }
        payload: { $ref: '#/components/schemas/PositionOpenPayload' }

    PositionCloseRequest:
      type: object
      required: [type, payload]
      properties:
        type: { type: string, const: position_close }
        payload: { $ref: '#/components/schemas/PositionClosePayload' }

    PositionModifyRequest:
      type: object
      required: [type, payload]
      properties:
        type: { type: string, const: position_modify }
        payload: { $ref: '#/components/schemas/PositionModifyPayload' }

    PositionHedgeRequest:
      type: object
      required: [type, payload]
      properties:
        type: { type: string, const: position_hedge }
        payload: { $ref: '#/components/schemas/PositionHedgePayload' }

    SessionBootRequest:
      type: object
      required: [type]
      properties:
        type: { type: string, const: session_boot }
        payload: { $ref: '#/components/schemas/SessionBootPayload' }

    StateSnapshotRequest:
      type: object
      required: [type]
      properties:
        type: { type: string, const: state_snapshot }
        payload: { type: object, additionalProperties: false }

    TradesRecentRequest:
      type: object
      required: [type]
      properties:
        type: { type: string, const: trades_recent }
        payload: { $ref: '#/components/schemas/TradesRecentPayload' }

    TradesHistoryMt5Request:
      type: object
      required: [type]
      properties:
        type: { type: string, const: trades_history_mt5 }
        payload: { $ref: '#/components/schemas/TradesHistoryMt5Payload' }

    AccountInfoRequest:
      type: object
      required: [type]
      properties:
        type: { type: string, const: account_info }
        payload: { type: object, additionalProperties: false }

    AccountPositionsRequest:
      type: object
      required: [type]
      properties:
        type: { type: string, const: account_positions }
        payload: { type: object, additionalProperties: false }

    AccountRiskRequest:
      type: object
      required: [type]
      properties:
        type: { type: string, const: account_risk }
        payload: { type: object, additionalProperties: false }
    EquityTodayRequest:
      type: object
      required: [type]
      properties:
        type: { type: string, const: equity_today }
        payload: { type: object, additionalProperties: false }

    PulseStatusRequest:
      type: object
      required: [type, payload]
      properties:
        type: { type: string, const: pulse_status }
        payload: { $ref: '#/components/schemas/PulseStatusPayload' }

    MarketMiniRequest:
      type: object
      required: [type]
      properties:
        type: { type: string, const: market_mini }
        payload: { type: object, additionalProperties: false }

    MarketSymbolsRequest:
      type: object
      required: [type]
      properties:
        type: { type: string, const: market_symbols }
        payload: { type: object, additionalProperties: false }

    MarketCalendarNextRequest:
      type: object
      required: [type]
      properties:
        type: { type: string, const: market_calendar_next }
        payload: { $ref: '#/components/schemas/MarketCalendarNextPayload' }

    MarketRegimeRequest:
      type: object
      required: [type]
      properties:
        type: { type: string, const: market_regime }
        payload: { type: object, additionalProperties: false }

    LiquidityMapRequest:
      type: object
      required: [type]
      properties:
        type: { type: string, const: liquidity_map }
        payload: { $ref: '#/components/schemas/LiquidityMapPayload' }

    OpportunityPriorityItemsRequest:
      type: object
      required: [type]
      properties:
        type: { type: string, const: opportunity_priority_items }
        payload: { $ref: '#/components/schemas/OpportunityPriorityItemsPayload' }

    JournalRecentRequest:
      type: object
      required: [type]
      properties:
        type: { type: string, const: journal_recent }
        payload: { $ref: '#/components/schemas/JournalRecentPayload' }
    JournalAppendRequest:
      type: object
      required: [type, payload]
      properties:
        type: { type: string, const: journal_append }
        payload: { $ref: '#/components/schemas/JournalAppendPayload' }

    BehaviorEventsRequest:
      type: object
      required: [type]
      properties:
        type: { type: string, const: behavior_events }
        payload: { type: object, additionalProperties: false }

    WhisperSuggestRequest:
      type: object
      required: [type]
      properties:
        type: { type: string, const: whisper_suggest }
        payload: { $ref: '#/components/schemas/WhisperSuggestPayload' }

    # ----- Payload schemas -----
    PositionOpenPayload:
      type: object
      required: [symbol, volume, side]
      properties:
        symbol: { type: string }
        volume: { type: number }
        side: { type: string, enum: [buy, sell] }
        sl: { type: number, nullable: true }
        tp: { type: number, nullable: true }
        comment: { type: string, nullable: true }

    PositionClosePayload:
      type: object
      required: [ticket]
      properties:
        ticket: { type: integer }
        fraction: { type: number, minimum: 0.01, maximum: 1.0, nullable: true }
        volume: { type: number, nullable: true }
      anyOf:
        - required: [fraction]
        - required: [volume]
        - properties: { }

    PositionModifyPayload:
      type: object
      required: [ticket]
      properties:
        ticket: { type: integer }
        sl: { type: number, nullable: true }
        tp: { type: number, nullable: true }
      anyOf:
        - required: [sl]
        - required: [tp]

    PositionHedgePayload:
      type: object
      required: [ticket]
      properties:
        ticket: { type: integer }
        volume: { type: number, nullable: true }

    SessionBootPayload:
      type: object
      properties:
        limit_trades: { type: integer, minimum: 1, maximum: 100 }
        include_positions: { type: boolean }
        include_equity: { type: boolean }
        include_risk: { type: boolean }

    TradesRecentPayload:
      type: object
      properties:
        limit: { type: integer, minimum: 1, maximum: 1000 }

    TradesHistoryMt5Payload:
      type: object
      properties:
        symbol: { type: string, nullable: true }
        date_from: { type: string, format: date, nullable: true }
        date_to: { type: string, format: date, nullable: true }
        pnl_min: { type: number, nullable: true }
        pnl_max: { type: number, nullable: true }

    MarketCalendarNextPayload:
      type: object
      properties:
        limit: { type: integer, minimum: 1, maximum: 50 }

    LiquidityMapPayload:
      type: object
      properties:
        symbol: { type: string, nullable: true }
        timeframe: { type: string, nullable: true, example: 'M5' }
    OpportunityPriorityItemsPayload:
      type: object
      properties:
        candidates: { type: array, items: { type: object } }
        symbols: { type: array, items: { type: string } }
        constraints: { type: object, additionalProperties: true }

    PulseStatusPayload:
      type: object
      required: [symbol]
      properties:
        symbol: { type: string }

    JournalRecentPayload:
      type: object
      properties:
        limit: { type: integer, minimum: 1, maximum: 200 }

    JournalAppendPayload:
      type: object
      required: [trade_id]
      properties:
        trade_id: { type: integer }
        kind: { type: string, enum: [ENTRY, CLOSE, PARTIAL_CLOSE, HEDGE, ORDER_MODIFY], nullable: true }
        text: { type: string, nullable: true }
        tags: { type: array, items: { type: string } }
        meta: { type: object, additionalProperties: true }

    WhisperSuggestPayload:
      type: object
      properties:
        user_id: { type: string, nullable: true }
        symbol: { type: string, nullable: true }

    WhisperSuggestResponse:
      type: object
      properties:
        message: { type: string, nullable: true }
        heuristics:
          type: array
          items:
            type: object
            description: Serialized heuristic whispers
        meta:
          type: object
          properties:
            user_id: { type: string }
            symbol: { type: string }

    TradeItem:
      type: object
      properties:
        id: { type: integer }
        ts_open: { type: string, nullable: true }
        ts_close: { type: string, nullable: true }
        symbol: { type: string }
        side: { type: string, nullable: true }
        entry: { type: number, nullable: true }
        exit: { type: number, nullable: true }
        pnl: { type: number, nullable: true }
        rr: { type: number, nullable: true }
        strategy: { type: string, nullable: true }
        session: { type: string, nullable: true }

    SessionBootResponse:
      type: object
      description: Composite boot snapshot for LLM initialization
      properties:
        trades:
          type: array
          items: { $ref: '#/components/schemas/TradeItem' }
        positions:
          type: array
          items:
            type: object
            additionalProperties: true
        equity:
          type: object
          nullable: true
          properties:
            balance_usd: { type: number, nullable: true }
            pnl_ytd_pct: { type: number, nullable: true }
            drawdown_pct: { type: number, nullable: true }
        risk:
          type: object
          nullable: true
          properties:
            daily_profit_pct: { type: number, nullable: true }
            daily_risk_pct: { type: number, nullable: true }
            used_pct: { type: number, nullable: true }
            exposure_pct: { type: number, nullable: true }

    TradeHistoryItem:
      type: object
      properties:
        id: { type: string }
        ts: { type: string, nullable: true }
        symbol: { type: string }
        direction: { type: string, nullable: true }
        entry: { type: number, nullable: true }
        exit: { type: number, nullable: true }
        pnl: { type: number, nullable: true }
        status: { type: string, nullable: true }
    
    PositionActionResponse:
      type: object
      description: Generic response envelope for position actions (open/close/modify/hedge)
      properties:
        ok: { type: boolean, nullable: true }
        success: { type: boolean, nullable: true }
        order:
          type: object
          nullable: true
          additionalProperties: true
          description: MT5 order result when returned by position_open
        result:
          type: object
          nullable: true
          additionalProperties: true
          description: Bridge result payload for close/modify/hedge

security: []
